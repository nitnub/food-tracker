// <auto-generated />
using System;
using FoodTracker.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodTracker.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodTracker.Models.Activity.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("DurationUnitId")
                        .HasColumnType("int");

                    b.Property<int>("IntensityId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DurationUnitId");

                    b.HasIndex("IntensityId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TypeId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("FoodTracker.Models.Activity.ActivityIntensity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ActivityIntensities");
                });

            modelBuilder.Entity("FoodTracker.Models.Activity.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("FoodTracker.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("FoodTracker.Models.Day.UserSafeDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("UserSafeDays");
                });

            modelBuilder.Entity("FoodTracker.Models.Event.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("FoodTracker.Models.Event.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("FoodTracker.Models.FODMAP.Fodmap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<bool>("FreeUse")
                        .HasColumnType("bit");

                    b.Property<bool>("Fructose")
                        .HasColumnType("bit");

                    b.Property<bool>("Lactose")
                        .HasColumnType("bit");

                    b.Property<int>("MaxUse")
                        .HasColumnType("int");

                    b.Property<int>("MaxUseUnitsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Oligos")
                        .HasColumnType("bit");

                    b.Property<bool>("Polyols")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("MaxUseUnitsId");

                    b.ToTable("Fodmaps");
                });

            modelBuilder.Entity("FoodTracker.Models.FODMAP.FodmapAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FodmapId")
                        .HasColumnType("int");

                    b.Property<bool>("Global")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FodmapId");

                    b.ToTable("FodmapAliases");
                });

            modelBuilder.Entity("FoodTracker.Models.FODMAP.FodmapCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FodmapCategories");
                });

            modelBuilder.Entity("FoodTracker.Models.Food.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FodmapId")
                        .HasColumnType("int");

                    b.Property<bool>("Global")
                        .HasColumnType("bit");

                    b.Property<bool>("GlutenFree")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Vegan")
                        .HasColumnType("bit");

                    b.Property<bool>("Vegetarian")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FodmapId");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("FoodTracker.Models.Food.FoodAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<bool>("Global")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodAliases");
                });

            modelBuilder.Entity("FoodTracker.Models.Food.IngredientMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IngredientFoodId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentFoodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IngredientFoodId");

                    b.HasIndex("ParentFoodId");

                    b.ToTable("IngredientMaps");
                });

            modelBuilder.Entity("FoodTracker.Models.Icon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HTML")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("IconGroupTypeId");

                    b.HasKey("Id");

                    b.HasIndex("Type");

                    b.ToTable("Icons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HTML = "<svg fill=\"currentColor\" version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 116.04 122.88\" style=\"enable-background:new 0 0 116.04 122.88\" xml:space=\"preserve\"><g><path d=\"M63.05,1.84c-0.04,3.61,0.24,7.2,0.87,10.79c0.51,2.88,1.25,5.73,2.23,8.55c3.4-2.37,6.99-4.23,10.7-5.35 c4.02-1.21,8.17-1.54,12.4-0.7c1.25,0.25,2.47,0.6,3.67,1.03c10.01,3.62,16.7,13.2,20.2,25.11c3.43,11.67,3.82,25.63,1.28,38.33 c-0.73,3.67-1.72,7.25-2.96,10.67c-2.06,5.69-4.52,10.46-7.46,14.45c-2.97,4.03-6.41,7.26-10.38,9.83c-0.61,0.39-1.27,0.79-2,1.19 c-6.79,3.78-17.04,6.87-26.8,7.12c-10.02,0.26-19.6-2.44-24.7-10.35c-0.22-0.34-0.45-0.72-0.67-1.13 c-0.61-1.09-1.11-2.14-1.61-3.21c-1.38-2.9-2.79-5.89-5.95-8.51c-1.2-1-2.5-1.7-3.89-2.12c-1.43-0.43-2.96-0.57-4.57-0.42 c-4.79,0.44-7.38,2.36-9.81,4.16c-1.84,1.36-3.59,2.66-6.08,3.42c-0.03,0.01-0.06,0.02-0.09,0.03c-0.31,0.09-0.6,0.16-0.88,0.2 c-0.32,0.05-0.64,0.08-0.96,0.08c-1.79,0-3.19-0.82-4.17-2.53c-0.77-1.36-1.23-3.33-1.35-5.96l0-0.07H0.05 c0-0.92-0.01-1.42-0.03-1.86c-0.1-3.63-0.13-4.84,3.57-8.19c0.56-0.51,1.13-0.97,1.71-1.4c0.61-0.45,1.24-0.86,1.88-1.25 c1.08-0.65,2.24-1.25,3.48-1.81c1.18-0.54,2.48-1.05,3.89-1.56c9.65-3.48,15.35-1.55,20.74,0.28c3.32,1.13,6.51,2.21,10.44,1.67 c3.9-0.53,7.28-3.43,9.77-7.2c3.01-4.55,4.68-10.3,4.45-14.82c-0.38-7.65-3.28-13.92-6.51-20.92c-3.96-8.57-8.41-18.18-9.63-32.78 l-0.33-3.88c-0.08-0.96,0.63-1.8,1.59-1.88c0.05,0,0.11-0.01,0.16-0.01L61.23,0c0.96-0.05,1.77,0.69,1.82,1.65 C63.05,1.71,63.05,1.78,63.05,1.84L63.05,1.84z M94.59,80.46c1.05,0,2,0.43,2.69,1.11c0.69,0.69,1.12,1.64,1.12,2.69 c0,1.05-0.43,2-1.12,2.69s-1.64,1.12-2.69,1.12s-2-0.43-2.69-1.12c-0.69-0.69-1.12-1.64-1.12-2.69c0-1.05,0.43-2,1.12-2.69 C92.58,80.88,93.53,80.46,94.59,80.46L94.59,80.46z M48.35,92.05c1.05,0,2,0.43,2.69,1.12c0.69,0.69,1.11,1.64,1.11,2.69 c0,1.05-0.43,2-1.11,2.69c-0.69,0.69-1.64,1.11-2.69,1.11c-1.05,0-2-0.43-2.69-1.11c-0.69-0.69-1.12-1.64-1.12-2.69 c0-1.05,0.43-2,1.12-2.69C46.35,92.48,47.3,92.05,48.35,92.05L48.35,92.05z M55.82,105.56c1.05,0,2,0.43,2.69,1.12 c0.69,0.69,1.12,1.64,1.12,2.69c0,1.05-0.43,2-1.12,2.69c-0.69,0.69-1.64,1.11-2.69,1.11s-2-0.43-2.69-1.11 c-0.69-0.69-1.12-1.64-1.12-2.69c0-1.05,0.43-2,1.12-2.69C53.82,105.98,54.77,105.56,55.82,105.56L55.82,105.56z M90.61,97.93 c1.05,0,2,0.43,2.69,1.12s1.11,1.64,1.11,2.69s-0.43,2-1.11,2.69c-0.69,0.69-1.64,1.11-2.69,1.11c-1.05,0-2-0.43-2.69-1.11 c-0.69-0.69-1.11-1.64-1.11-2.69s0.43-2,1.11-2.69C88.61,98.36,89.56,97.93,90.61,97.93L90.61,97.93z M75.52,105.08 c1.05,0,2,0.43,2.69,1.12c0.69,0.69,1.12,1.64,1.12,2.69s-0.43,2-1.12,2.69c-0.69,0.69-1.64,1.12-2.69,1.12s-2-0.43-2.69-1.12 c-0.69-0.69-1.12-1.64-1.12-2.69s0.43-2,1.12-2.69C73.52,105.51,74.47,105.08,75.52,105.08L75.52,105.08z M63.61,94.12 c1.05,0,2,0.43,2.69,1.12c0.69,0.69,1.12,1.64,1.12,2.69c0,1.05-0.43,2-1.12,2.69c-0.69,0.69-1.64,1.11-2.69,1.11 c-1.05,0-2-0.43-2.69-1.11c-0.69-0.69-1.12-1.64-1.12-2.69c0-1.05,0.43-2,1.12-2.69C61.6,94.55,62.55,94.12,63.61,94.12 L63.61,94.12z M61.7,80.62c1.05,0,2,0.43,2.69,1.12c0.69,0.69,1.11,1.64,1.11,2.69c0,1.05-0.43,2-1.11,2.69 c-0.69,0.69-1.64,1.11-2.69,1.11c-1.05,0-2-0.43-2.69-1.11s-1.11-1.64-1.11-2.69c0-1.05,0.43-2,1.11-2.69S60.65,80.62,61.7,80.62 L61.7,80.62z M79.18,86.34c1.05,0,2,0.43,2.69,1.11c0.69,0.69,1.11,1.64,1.11,2.69c0,1.05-0.43,2-1.11,2.69s-1.64,1.12-2.69,1.12 c-1.05,0-2-0.43-2.69-1.12c-0.69-0.69-1.11-1.64-1.11-2.69c0-1.05,0.43-2,1.11-2.69C77.17,86.76,78.12,86.34,79.18,86.34 L79.18,86.34z M62.83,66.56c2.73,2.07,6.04,3.98,9.27,4.45c2.45,0.35,4.88-0.16,6.98-2.18c7.07-6.81,12.53-3.9,18.05-0.96 c4,2.13,8.05,4.29,12.71,1.13c0.46-0.31,0.9-0.72,1.33-1.18c0.44-0.47,0.88-1.01,1.32-1.56c0.35-8.31-0.54-16.64-2.71-23.99 c-3.21-10.9-9.2-19.62-18.05-22.82c-1-0.36-2.05-0.66-3.17-0.88c-3.63-0.73-7.23-0.44-10.72,0.61c-3.97,1.19-7.83,3.37-11.46,6.15 l0,0c-0.12,0.09-0.26,0.17-0.41,0.23c-0.89,0.35-1.9-0.08-2.25-0.97c-1.49-3.76-2.55-7.55-3.22-11.35 c-0.56-3.19-0.86-6.41-0.91-9.66L47.11,4.22l0.18,2.1c1.17,14,5.48,23.31,9.32,31.61c3.38,7.31,6.41,13.87,6.83,22.21 C63.54,62.14,63.32,64.32,62.83,66.56L62.83,66.56z M112.09,71.64c-0.1,0.07-0.2,0.15-0.31,0.22c-6.39,4.33-11.37,1.68-16.29-0.94 c-4.4-2.34-8.75-4.66-14.01,0.41c-2.99,2.88-6.43,3.62-9.88,3.12c-3.46-0.5-6.88-2.28-9.79-4.33c-0.84,2.42-1.99,4.8-3.4,6.93 c-3,4.54-7.19,8.04-12.2,8.72c-4.74,0.65-8.31-0.56-12.02-1.82c-4.84-1.64-9.95-3.37-18.46-0.31c-1.25,0.45-2.46,0.93-3.63,1.46 c-1.11,0.5-2.15,1.04-3.11,1.62c-0.58,0.35-1.12,0.71-1.62,1.07c-0.53,0.38-1.01,0.77-1.44,1.17c-2.52,2.28-2.5,3.09-2.43,5.53 c0.02,0.67,0.04,1.43,0.04,1.95h0c0.09,2.02,0.4,3.45,0.89,4.32c0.3,0.53,0.69,0.78,1.15,0.78c0.12,0,0.25-0.01,0.4-0.04 c0.15-0.02,0.29-0.06,0.44-0.1c0.02-0.01,0.04-0.01,0.06-0.02c1.92-0.59,3.44-1.71,5.03-2.89c2.81-2.08,5.81-4.3,11.57-4.83 c2.07-0.19,4.04-0.01,5.88,0.54c1.83,0.55,3.54,1.48,5.12,2.78c3.76,3.12,5.34,6.45,6.87,9.69c0.49,1.04,0.98,2.06,1.5,3 c0.17,0.3,0.35,0.61,0.56,0.93c4.33,6.71,12.77,8.99,21.69,8.76c9.19-0.24,18.82-3.14,25.19-6.69c0.62-0.34,1.22-0.7,1.81-1.08 c3.62-2.33,6.75-5.28,9.46-8.96c2.74-3.72,5.05-8.21,7-13.58c1.16-3.21,2.1-6.63,2.81-10.17 C111.46,76.53,111.83,74.09,112.09,71.64L112.09,71.64z\" /></g></svg>",
                            Name = "Stomach",
                            Type = 5
                        },
                        new
                        {
                            Id = 2,
                            HTML = "<svg fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" shape-rendering=\"geometricPrecision\" text-rendering=\"geometricPrecision\" image-rendering=\"optimizeQuality\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" viewBox=\"0 0 512 488.58\"><path fill-rule=\"nonzero\" d=\"m202.79 10.53 123.29 123.2c21.18 23.62 34.07 38.86 33.91 73.56l152.01 152-17.96 17.96-146.28-146.28c-12.01-12.01-11.87-12.61-10.56-18.47 4.28-18.55-7-43.1-20.01-56.11-43.36-43.36-86.77-86.67-130.13-130.03-13.66-13.67-35.46 8.08-21.82 21.72l45.59 45.59.24.23c1.3 1.31 1.3 3.45 0 4.75l-11.03 11.03a3.35 3.35 0 0 1-4.74 0l-71.56-71.56c-13.44-13.44-35.49 8.06-21.77 21.78l71.55 71.55c1.31 1.31 1.31 3.45 0 4.75l-11.67 11.67a3.362 3.362 0 0 1-4.75 0l-95.7-95.7c-13.5-13.5-35.46 8-21.78 21.68l95.75 95.75a3.362 3.362 0 0 1 0 4.75l-11.39 11.4a3.38 3.38 0 0 1-4.75 0l-71.32-71.32c-13.7-13.71-35.25 8.29-21.72 21.82 17.3 17.3 36.6 36.8 55.92 56.19 16.98 17.18 33.96 34.25 55.72 56.02 3.54 4.01 34.66 32.19 11.74 36.38-16.16 4.45-40.53-.02-53.74 6.1-8.76 4.28-12.94 13.16-7.96 21.72 2.05 3.44 5.54 6.38 10.56 8.24 8.43 3.15 22.44 1.86 31.73 1.86 23.8 0 67.37-.04 98.3-4.25 15.86-2.13 25.04 4.76 34.45 14.17l137.84 137.85-18.04 18.05-147.12-147.12c-29.73 4.43-69.56 3.86-96.92 3.49-15.3-.24-36.57 1.7-50.42-4.09-31.26-13.16-33.22-52.86-3.3-68.81 12.45-6.57 24.51-6.03 38.05-6.43-37.65-37.64-74.97-75.9-112.69-113.6-19.2-19.21-10.04-51.94 14.71-61.13-32.14-32.14 7.8-76.43 40.38-62.66 5.17 2.19 8.92 5.22 12.79 9.11 9.69-24.9 41.67-34.74 61.28-15.13l2.37 2.37C153.06.59 183.1-9.15 202.79 10.53zm240.08 346.15c7.52 0 14.33 3.05 19.24 7.97a27.123 27.123 0 0 1 7.97 19.24c0 7.52-3.05 14.33-7.97 19.24a27.106 27.106 0 0 1-19.24 7.97c-7.51 0-14.33-3.05-19.24-7.97a27.147 27.147 0 0 1-7.97-19.24c0-7.51 3.06-14.33 7.97-19.24a27.123 27.123 0 0 1 19.24-7.97zm10 17.21a14.11 14.11 0 0 0-10-4.14c-3.9 0-7.44 1.59-10 4.14a14.145 14.145 0 0 0 0 20c2.56 2.55 6.1 4.14 10 4.14 3.91 0 7.45-1.59 10-4.14 2.56-2.55 4.14-6.1 4.14-10 0-3.9-1.58-7.44-4.14-10zm-85.71-22.41c7.07 0 12.8 5.73 12.8 12.8s-5.73 12.8-12.8 12.8-12.8-5.73-12.8-12.8 5.73-12.8 12.8-12.8zm-56.36-73.85c7.52 0 14.33 3.05 19.24 7.97a27.123 27.123 0 0 1 7.97 19.24c0 7.52-3.05 14.33-7.97 19.24a27.106 27.106 0 0 1-19.24 7.97c-7.51 0-14.33-3.05-19.24-7.97a27.106 27.106 0 0 1-7.97-19.24c0-7.51 3.05-14.33 7.97-19.24a27.123 27.123 0 0 1 19.24-7.97zm10 17.21a14.11 14.11 0 0 0-10-4.14c-3.9 0-7.44 1.59-10 4.14-2.55 2.55-4.14 6.1-4.14 10 0 3.9 1.59 7.45 4.14 10 2.56 2.55 6.1 4.14 10 4.14 3.91 0 7.45-1.59 10-4.14s4.14-6.1 4.14-10c0-3.9-1.59-7.45-4.14-10zm-35.97-89.02c6.15 0 11.14 4.99 11.14 11.14s-4.99 11.14-11.14 11.14-11.14-4.99-11.14-11.14 4.99-11.14 11.14-11.14zm-50.44 50.17c7.07 0 12.8 5.73 12.8 12.8 0 7.06-5.73 12.8-12.8 12.8s-12.8-5.74-12.8-12.8c0-7.07 5.73-12.8 12.8-12.8zm-62.38-76.04c7.07 0 12.8 5.74 12.8 12.8 0 7.07-5.73 12.8-12.8 12.8s-12.8-5.73-12.8-12.8c0-7.06 5.73-12.8 12.8-12.8zm70.47-49.64c7.51 0 14.32 3.06 19.24 7.97 4.91 4.92 7.97 11.73 7.97 19.24 0 7.52-3.06 14.33-7.97 19.25-4.92 4.91-11.73 7.97-19.24 7.97-7.52 0-14.33-3.06-19.25-7.97-4.91-4.92-7.97-11.73-7.97-19.25 0-7.51 3.06-14.32 7.97-19.24 4.92-4.91 11.73-7.97 19.25-7.97zm9.99 17.21a14.104 14.104 0 0 0-9.99-4.14c-3.91 0-7.45 1.59-10 4.14-2.56 2.56-4.15 6.1-4.15 10 0 3.91 1.59 7.45 4.15 10 2.55 2.56 6.09 4.15 10 4.15 3.9 0 7.44-1.59 9.99-4.15 2.56-2.55 4.15-6.09 4.15-10 0-3.9-1.59-7.44-4.15-10z\" /></svg>",
                            Name = "Skin",
                            Type = 5
                        },
                        new
                        {
                            Id = 3,
                            HTML = "<svg fill=\"currentColor\" id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 94.88 122.88\"><title>stress</title><path d=\"M19.78,95.62a1.5,1.5,0,0,1-1.15,2.76,12.31,12.31,0,0,0-3.71-.91,17.17,17.17,0,0,0-3,0c0,.77.13,1.53.23,2.28.15,1.16.37,2.36.64,3.58a1.51,1.51,0,0,1-.19,1.11,12.63,12.63,0,0,0-1.45,4.65,3.83,3.83,0,0,0,1,3.09,6.71,6.71,0,0,0,3.56,1.62,26.07,26.07,0,0,0,9-.3,56.84,56.84,0,0,0,10.26-2.82,27.53,27.53,0,0,0,7.19-3.9c1.9-1.52,2.77-4,3.52-6.12l.58-1.61c.91-2.53,2.51-6.93,4.57-8.52a1.49,1.49,0,0,1,1.83,2.36c-1.38,1.06-2.79,4.94-3.6,7.17l-.57,1.58c-.87,2.49-1.9,5.41-4.48,7.47a30.76,30.76,0,0,1-8,4.35q-1.07.41-2.16.78a24.75,24.75,0,0,1-.1,3.22,27.13,27.13,0,0,1-.79,4.3,1.49,1.49,0,1,1-2.88-.77,23.16,23.16,0,0,0,.7-3.81,19.63,19.63,0,0,0,.1-2c-1.94.54-3.86,1-5.67,1.29a28.72,28.72,0,0,1-10.07.3A9.59,9.59,0,0,1,10,114.28a6.67,6.67,0,0,1-1.84-5.37,15.21,15.21,0,0,1,1.59-5.43c-.22-1.07-.41-2.18-.56-3.33s-.28-2.54-.33-3.83l0-.33c-.23-2.42-.26-4.78-.29-7.15v-.68l-3.87-.23a5,5,0,0,1-2.51-.77,4.62,4.62,0,0,1-1.6-1.82A5.25,5.25,0,0,1,0,82.89a8,8,0,0,1,1.39-4.13l4-8.14c2-4,1.94-4.54,1.86-6.65,0-.93-.09-2.14,0-3.94A29.85,29.85,0,0,1,8,53.92a20,20,0,0,1,1.38-4L2,46.75a1.5,1.5,0,0,1-.77-2,1.69,1.69,0,0,1,.19-.32c6.79-8.8,13.87-15,21-19.13l.1,3.44A70.48,70.48,0,0,0,5,44.79L12.2,48a1.51,1.51,0,0,1,.51,2,16,16,0,0,0-1.85,4.62,27.3,27.3,0,0,0-.69,5.5c-.05,1.69,0,2.84,0,3.73.1,2.71.13,3.39-2.16,8.08L3.93,80.31A5.13,5.13,0,0,0,3,83,2.35,2.35,0,0,0,3.19,84a1.58,1.58,0,0,0,.56.64,1.92,1.92,0,0,0,1,.29l4.75.28a1.33,1.33,0,0,1,.45-.08l4.4.36a1.5,1.5,0,0,1-.25,3l-2.6-.16v.47c0,1.91.06,3.8.19,5.7a20.62,20.62,0,0,1,3.52,0,15.77,15.77,0,0,1,4.59,1.11Zm5.9-29.34a2.56,2.56,0,1,0,2.56,2.55,2.55,2.55,0,0,0-2.56-2.55Zm7.76-3.15a1.49,1.49,0,1,1-1.39,2.64,12.18,12.18,0,0,0-5.54-1.26,14.18,14.18,0,0,0-5.91,1.27,1.49,1.49,0,1,1-1.26-2.71,17.22,17.22,0,0,1,7.17-1.54,15.24,15.24,0,0,1,6.93,1.6ZM65.13,93.36a1.49,1.49,0,0,1,3,.3c-.13,1.25-.23,2.47-.29,3.68,16-10.14,20.91-24.85,18.69-38.56a39.47,39.47,0,0,0-1.43-6l2.65-1.5a44.58,44.58,0,0,1,1.72,7c2.45,15.12-3.14,31.32-21.11,42.22a1.48,1.48,0,0,1-.59.2,58.18,58.18,0,0,0,.42,7,53.57,53.57,0,0,0,3,12.34,1.49,1.49,0,1,1-2.79,1.06,56.29,56.29,0,0,1-3.19-13,65.28,65.28,0,0,1-.07-14.68ZM59.42,73.53a1.49,1.49,0,0,1-2.94.54,6.4,6.4,0,0,1,.12-2.84,6.3,6.3,0,0,1,2-3.09A7,7,0,0,1,61.9,66.6a6.88,6.88,0,0,1,3.15.14c2.85.8,4.07,2.24,4.32,4.09A9.52,9.52,0,0,1,68.1,76a71.9,71.9,0,0,1-6.62,11.51c-4.08,5.27-8,7.18-8.65-4A1.49,1.49,0,0,1,54.23,82a1.51,1.51,0,0,1,1.58,1.41c.26,4.87,1.77,4.32,3.31,2.33a70.46,70.46,0,0,0,6.29-11,7.36,7.36,0,0,0,1-3.51c-.09-.65-.7-1.21-2.17-1.63a4,4,0,0,0-1.81-.08,4.08,4.08,0,0,0-1.9.89,3.22,3.22,0,0,0-1.12,3.11ZM70,14.19l-8.23,2L63.78,0,52.33,21.74,60,20.41,57.37,36.67,70,14.19ZM92.43,42.75l-8.51-2.54,11-13.48L72.27,39.92,80,43,68.59,56.24,92.43,42.75ZM40.09,12.17l-6.47,6.41L26.88,2.08l.74,26.84,6.59-5.38,5.91,16.8,0-28.17ZM45.23,19c.9,0,1.81,0,2.7.11l-.15.29A5.11,5.11,0,0,0,47.19,22c-.65,0-1.3-.05-2-.06V19ZM69,26.53A47.83,47.83,0,0,1,75.61,32l-2.67,1.55a44.49,44.49,0,0,0-5.44-4.42L69,26.53Z\" /></svg>",
                            Name = "Head",
                            Type = 5
                        },
                        new
                        {
                            Id = 4,
                            HTML = "<svg fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" shape-rendering=\"geometricPrecision\" text-rendering=\"geometricPrecision\" image-rendering=\"optimizeQuality\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" viewBox=\"0 0 512 282.68\"><path fill-rule=\"nonzero\" d=\"M3.14 132.9c14.51-17.53 29.53-33.35 44.94-47.39 60.17-54.78 127.69-84 197.43-85.45 69.61-1.46 141.02 24.79 209.14 80.95 18.45 15.21 36.6 32.54 54.3 52 3.82 4.19 4.02 10.42.78 14.81-19.73 27.91-41.98 51.4-65.97 70.56-53.57 42.77-115.96 63.9-179.2 64.29-63.05.39-126.84-19.87-183.44-59.83-28.31-20-54.85-44.93-78.58-74.67-3.65-4.59-3.29-11.1.6-15.27zM256 83.24c32.09 0 58.1 26.01 58.1 58.1s-26.01 58.1-58.1 58.1-58.1-26.01-58.1-58.1c0-5.97.9-11.74 2.57-17.16 4.25 11.15 15.04 19.07 27.68 19.07 16.35 0 29.61-13.26 29.61-29.61 0-12.7-7.98-23.52-19.2-27.73 5.5-1.73 11.36-2.67 17.44-2.67zm107.24-33.52a141.453 141.453 0 0 1 23.1 37.7c6.92 16.67 10.74 34.9 10.74 53.92 0 19.03-3.82 37.26-10.73 53.94a141.479 141.479 0 0 1-30.6 45.8l-1.92 1.89c26.4-9.83 51.79-24.09 75.37-42.91 20.12-16.07 38.96-35.49 55.99-58.27-15-15.93-30.16-30.18-45.38-42.73-25.22-20.8-50.84-37.2-76.57-49.34zm-212.08 185.9c-10.65-11.81-19.33-25.44-25.5-40.32a140.518 140.518 0 0 1-10.74-53.96c0-19.01 3.81-37.22 10.72-53.87 6.85-16.52 16.75-31.46 28.96-44.1-31.5 13.33-61.97 33.25-90.76 59.44-12.7 11.57-25.04 24.3-36.95 38.17 20.74 24.71 43.54 45.64 67.69 62.71 18.19 12.84 37.15 23.5 56.58 31.93zM300.95 32.58c-13.78-5.71-28.98-8.88-44.94-8.88-15.94 0-31.12 3.17-44.93 8.9-14.34 5.95-27.32 14.73-38.23 25.64-10.88 10.89-19.64 23.85-25.6 38.2-5.71 13.79-8.88 28.97-8.88 44.9 0 15.96 3.17 31.17 8.9 44.98a117.654 117.654 0 0 0 25.58 38.19c10.86 10.84 23.84 19.6 38.24 25.57 13.8 5.72 28.98 8.88 44.92 8.88 15.95 0 31.15-3.17 44.96-8.88 14.36-5.93 27.32-14.7 38.2-25.57 10.88-10.88 19.64-23.84 25.57-38.16 5.72-13.85 8.89-29.05 8.89-45.01 0-15.95-3.17-31.14-8.89-44.95-5.93-14.37-14.69-27.33-25.57-38.21-10.86-10.86-23.84-19.63-38.22-25.6z\" /></svg>",
                            Name = "Vision",
                            Type = 5
                        },
                        new
                        {
                            Id = 5,
                            HTML = "<svg fill=\"currentColor\" id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 122.88 109.08\"><title>voice-command</title><path d=\"M75.92,25.86a3.31,3.31,0,1,0,5.75,2.22,3.36,3.36,0,0,0-.8-2.16,17.61,17.61,0,0,1,4.49,1.68,1.86,1.86,0,1,0,1.72-3.29,19.36,19.36,0,0,0-8.54-2.4,16.09,16.09,0,0,0-8.82,2.45,1.86,1.86,0,0,0,1.92,3.19,13,13,0,0,1,4.28-1.69ZM45.78,79.67a2.55,2.55,0,0,1,.67,1.48,2.65,2.65,0,0,1-2.34,2.92h0c-2.26.28-5.37-3.81-6.21-5A17,17,0,0,1,35.09,73,18.69,18.69,0,0,1,36.92,60.3c1.51-3.11,6.27-.72,4.74,2.36-3.29,6.51-1.75,12.25,3.75,16.65.12.12.26.24.37.36Zm-25,25.08a2.66,2.66,0,0,1-3.4,4c-.22-.14-.48-.35-.69-.51A46,46,0,0,1,6.45,97.45,37.2,37.2,0,0,1,.8,84.25,37.66,37.66,0,0,1,.59,69.88,47.47,47.47,0,0,1,5.78,55.37c1.62-3.09,6.3-.57,4.68,2.52A41.47,41.47,0,0,0,5.84,70.71,32.36,32.36,0,0,0,6,83.13a32.72,32.72,0,0,0,4.91,11.41A40.48,40.48,0,0,0,20,104a5.7,5.7,0,0,1,.76.71ZM33,90.67a2.66,2.66,0,0,1-3.43,4l-.05,0a34.72,34.72,0,0,1-8.09-8,24.29,24.29,0,0,1-4.12-9.31,24.91,24.91,0,0,1,.12-10.2,35.43,35.43,0,0,1,4.33-10.59c2-3.05,6.33-.1,4.58,2.74a30.54,30.54,0,0,0-3.67,8.88A18.52,18.52,0,0,0,25.8,83.74a29.71,29.71,0,0,0,6.64,6.54,1.92,1.92,0,0,1,.51.39Zm61.52,3.75a37.65,37.65,0,0,1-1.3,11,2.2,2.2,0,0,1-4.25-1.14,33.4,33.4,0,0,0,1-5.59,27,27,0,0,0,.16-3c-2.85.78-5.67,1.42-8.33,1.88a42.39,42.39,0,0,1-14.8.44,14.06,14.06,0,0,1-7.55-3.61,9.87,9.87,0,0,1-2.71-7.89,22.18,22.18,0,0,1,2.34-8c-.33-1.57-.6-3.2-.82-4.88a161.15,161.15,0,0,1-.95-16.63v-1l-5.61-.33H51.6a7.06,7.06,0,0,1-3.7-1.14A6.46,6.46,0,0,1,45.56,52a7.8,7.8,0,0,1-.76-3.6,11.75,11.75,0,0,1,2-6.08l5.85-11.94c2.88-5.89,2.84-6.67,2.72-9.77a53.78,53.78,0,0,1,1.1-14.76,29.85,29.85,0,0,1,2-5.82l4,1.65a25.12,25.12,0,0,0-1.85,5.21,49.41,49.41,0,0,0-1,13.57c.16,4,.2,5-3.18,11.87l-5.86,12a2.59,2.59,0,0,1-.17.33,7.55,7.55,0,0,0-1.4,3.87,3.31,3.31,0,0,0,.32,1.57,2.38,2.38,0,0,0,.82.93,2.83,2.83,0,0,0,1.43.42h.18c4.94.3,9,.41,13.92.83a2.2,2.2,0,0,1-.37,4.39h-.11l-3.71-.22c.07,3.38.09,6.72.36,10.09a14.75,14.75,0,0,0,4.86,1.45,10.23,10.23,0,0,0,5.24-.83,2.2,2.2,0,0,1,1.77,4A14.54,14.54,0,0,1,66.4,72.3a17.44,17.44,0,0,1-4-.92c.06.59.12,1.18.2,1.78.23,1.71.54,3.47.93,5.25A2.18,2.18,0,0,1,63.22,80a18.41,18.41,0,0,0-2.14,6.83,5.63,5.63,0,0,0,1.45,4.53,9.8,9.8,0,0,0,5.24,2.37A37.76,37.76,0,0,0,81,93.34a83.6,83.6,0,0,0,15-4.13,40.94,40.94,0,0,0,10.57-5.74c2.79-2.24,4.07-5.87,5.16-9,.23-.63.44-1.25.54-1.52l.32-.86c1.36-3.72,3.7-10.16,6.72-12.49A2.19,2.19,0,1,1,122,63.09c-2,1.55-4.08,7.24-5.27,10.51-.24.65-.18.5-.32.88-.25.68-.38,1.06-.52,1.45-1.29,3.67-2.79,8-6.58,11a44.64,44.64,0,0,1-11.72,6.37c-1,.4-2.07.78-3.14,1.13Z\" /></svg>",
                            Name = "Taste / Smell",
                            Type = 5
                        },
                        new
                        {
                            Id = 6,
                            HTML = "<svg fill=\"currentColor\" version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 122.88 110.33\" style=\"enable-background:new 0 0 122.88 110.33\" xml:space=\"preserve\"><g><path d=\"M13.9,67.74c1.15,0.54,2.34,0.96,3.59,1.28c1.24,0.32,2.54,0.55,3.87,0.67c1.18,0.11,2.4,0.15,3.65,0.12 c1.08-0.03,2.2-0.11,3.35-0.24c-0.26-1.96-0.39-3.7-0.34-5.26c0.05-1.73,0.33-3.22,0.89-4.53c0.52-1.21,1.26-2.23,2.27-3.08 c0.82-0.7,1.82-1.28,3.03-1.76c-0.79-0.75-1.51-1.43-2.14-2.07c-0.8-0.81-1.46-1.55-1.97-2.27c-1.28-1.79-1.7-3.34-1.08-4.99 c0.59-1.56,2.17-3.15,4.91-5.1c1.41-1,2-1.88,2.17-2.75c0.18-0.88-0.07-1.83-0.34-2.88c-0.15-0.6-0.31-1.22-0.43-1.83 c-0.12-0.59-0.21-1.2-0.25-1.86c-1.03-0.96-2.52-2.26-4.32-3.09c-1.85-0.85-4.05-1.22-6.43-0.21c-0.44,0.18-0.91,0.17-1.31,0.01 c-0.41-0.17-0.75-0.49-0.93-0.92l0,0c-0.18-0.44-0.17-0.9-0.01-1.31c0.17-0.41,0.49-0.75,0.92-0.93l0.01,0 c2.86-1.21,5.46-1.09,7.69-0.38c1.91,0.61,3.55,1.66,4.87,2.7c0.24-0.8,0.58-1.65,1.05-2.55c0.61-1.18,1.44-2.45,2.55-3.83 c0.49-0.6,0.97-1.23,1.43-1.9c0.46-0.67,0.89-1.41,1.28-2.23c0.39-0.83,0.74-1.77,1.02-2.86c0.28-1.1,0.5-2.34,0.63-3.78h0 c0.04-0.47,0.27-0.88,0.61-1.17c0.34-0.28,0.78-0.44,1.25-0.4c0.47,0.04,0.88,0.27,1.17,0.61l0.03,0.04 c0.26,0.33,0.41,0.76,0.37,1.22l-0.01,0.05c-0.15,1.64-0.4,3.07-0.73,4.34c-0.34,1.29-0.75,2.41-1.22,3.41 c-0.47,1.01-0.99,1.88-1.52,2.67c-0.53,0.78-1.08,1.48-1.62,2.16c-1.23,1.53-2.04,2.89-2.55,4.1c-0.49,1.17-0.7,2.21-0.75,3.15 c0.04,0.14,0.06,0.29,0.05,0.44c0,0.15-0.02,0.3-0.06,0.44c0.03,0.54,0.1,1.05,0.2,1.55c0.11,0.55,0.23,1.04,0.36,1.51 c0.42,1.62,0.79,3.08,0.48,4.59c-0.32,1.52-1.32,3.03-3.64,4.68c-1.83,1.3-2.89,2.28-3.33,3.14c-0.37,0.73-0.23,1.4,0.3,2.16 c0.79,1.12,2.24,2.49,4.11,4.25c0.77-1.74,1.69-3.21,2.74-4.41c1.2-1.37,2.57-2.39,4.11-3.08c1.7-0.76,3.57-1.1,5.6-1.03 c2.02,0.06,4.2,0.52,6.53,1.35c0.45,0.16,0.79,0.49,0.98,0.89c0.19,0.39,0.22,0.85,0.07,1.29l-0.02,0.05 c-0.16,0.44-0.49,0.77-0.88,0.95c-0.39,0.19-0.85,0.22-1.29,0.07l-0.04-0.01c-1.94-0.69-3.71-1.08-5.31-1.14 c-1.58-0.07-3,0.17-4.25,0.73c-1.24,0.55-2.34,1.44-3.31,2.66c-0.98,1.25-1.81,2.85-2.49,4.82l0,0c-0.06,0.17-0.15,0.33-0.25,0.48 c-0.09,0.12-0.2,0.23-0.32,0.32l-0.02,0.03c-0.01,0.02-0.04,0.05-0.08,0.09c-0.12,0.13-0.26,0.23-0.4,0.31 c-0.13,0.07-0.26,0.13-0.4,0.16c-0.02,0.01-0.05,0.02-0.08,0.02l-0.01,0c-1.66,0.37-2.93,0.86-3.89,1.49 c-0.93,0.61-1.55,1.35-1.94,2.25c-0.43,1-0.62,2.24-0.63,3.73c-0.01,1.53,0.18,3.32,0.49,5.41l0,0.02 c0.01,0.05,0.01,0.11,0.01,0.17c0.9,1.13,1.95,2.09,3.12,2.91c1.23,0.86,2.6,1.56,4.1,2.13c1.61,0.62,3.36,1.08,5.23,1.41 c1.87,0.33,3.86,0.54,5.95,0.65c0.1,0,0.19,0.02,0.28,0.04l0,0c0.09,0.02,0.18,0.04,0.26,0.08c1.09,0.34,2.4,0.43,3.89,0.31 c1.53-0.12,3.23-0.46,5.06-0.95c1.93-0.52,3.98-1.22,6.1-2.02c2.12-0.8,4.33-1.72,6.56-2.68l0.03-0.01 c0.05-0.02,0.11-0.04,0.16-0.06c0.07-0.02,0.13-0.04,0.19-0.05L85,69.12V62.1c0-0.03,0-0.07,0.01-0.1l0-0.05 c0.1-1.15,0.3-2.19,0.59-3.1c0.3-0.93,0.69-1.73,1.18-2.41c0.53-0.74,1.17-1.33,1.91-1.77c0.73-0.43,1.56-0.71,2.48-0.83 c0.06-0.01,0.1-0.02,0.14-0.02l0.01,0c0.05,0,0.09-0.01,0.13-0.01l1.29,0.02v0l0.05,0c2.79,0.04,5.36,0.07,7.3-2.12 c1-1.12,1.64-2.3,2.01-3.52c0.37-1.22,0.46-2.48,0.34-3.75c-0.12-1.34-0.47-2.69-0.95-4.04c-0.49-1.36-1.13-2.69-1.83-3.98 c-0.23-0.42-0.26-0.89-0.14-1.31c0.12-0.42,0.41-0.8,0.83-1.02l0.01,0c0.41-0.22,0.88-0.26,1.3-0.13c0.42,0.12,0.8,0.41,1.02,0.83 l0,0c0.79,1.44,1.51,2.97,2.07,4.53c0.57,1.58,0.97,3.2,1.12,4.83c0.15,1.7,0.03,3.4-0.47,5.06c-0.5,1.66-1.38,3.27-2.73,4.79 c-2.99,3.36-6.33,3.31-9.95,3.26v0l-0.05,0c-0.23,0-0.49-0.01-1.1-0.01c-0.43,0.06-0.81,0.19-1.14,0.39 c-0.33,0.2-0.62,0.46-0.87,0.8c-0.29,0.4-0.53,0.91-0.72,1.51c-0.19,0.62-0.32,1.33-0.4,2.15v6.12l10.93-2.82l0,0l0.02,0 c0.02-0.01,0.04-0.01,0.07-0.02l13-2.54c0.63-0.41,1.22-0.85,1.76-1.31c0.58-0.49,1.1-0.99,1.56-1.51 c1.43-1.59,2.39-3.37,2.97-5.27c0.62-2.05,0.79-4.25,0.59-6.49c-0.19-2.17-0.72-4.38-1.52-6.55c-0.85-2.32-1.99-4.59-3.34-6.73 c-0.94-1.49-1.99-2.92-3.1-4.25c-1.13-1.34-2.32-2.58-3.54-3.68c-0.1-0.09-0.19-0.19-0.26-0.29c-0.07-0.1-0.13-0.2-0.17-0.31 l-0.01-0.03c-1.07-2.65-2.27-5.18-3.74-7.47c-1.46-2.28-3.2-4.32-5.34-6.01c-2.14-1.69-4.7-3.04-7.84-3.94 c-3.16-0.91-6.9-1.37-11.36-1.26c-0.11,0-0.21,0-0.3-0.02c-0.09-0.01-0.18-0.04-0.27-0.06l-0.16-0.05 c-0.85,0.59-1.6,1.21-2.25,1.87c-0.7,0.7-1.28,1.42-1.76,2.18c-0.48,0.77-0.86,1.57-1.14,2.4c-0.28,0.84-0.46,1.71-0.54,2.61 c-0.04,0.43-0.23,0.8-0.52,1.08c-0.28,0.27-0.64,0.44-1.04,0.47c-0.03,0-0.06,0.01-0.09,0.01h-0.01c-1.55,0.09-2.91,0.42-4.09,0.96 c-1.25,0.57-2.31,1.37-3.19,2.37c-0.92,1.03-1.66,2.27-2.24,3.68c-0.61,1.46-1.05,3.1-1.33,4.86c0.19,0.46,0.34,0.94,0.46,1.43 c0.13,0.52,0.23,1.05,0.34,1.58c0.16,0.84,0.33,1.68,0.6,2.34c0.24,0.58,0.57,1.02,1.08,1.19c0.45,0.15,0.8,0.46,0.99,0.86 c0.2,0.39,0.25,0.86,0.1,1.31c-0.15,0.45-0.47,0.8-0.86,0.99c-0.39,0.2-0.86,0.25-1.31,0.1l-0.04-0.02 c-1.47-0.5-2.34-1.42-2.91-2.54c-0.55-1.09-0.79-2.33-1.03-3.58c-0.06-0.32-0.12-0.63-0.2-0.99l-0.01-0.04 c-0.05-0.24-0.11-0.48-0.18-0.7c-1.66-1.25-3.57-0.82-5.42,0.29v0c-1.99,1.19-3.94,3.14-5.5,4.7c-0.33,0.33-0.65,0.65-0.95,0.94 c-0.3,0.29-0.59,0.57-0.89,0.84c-0.35,0.32-0.8,0.46-1.24,0.44c-0.43-0.02-0.85-0.21-1.16-0.55l0,0c-0.02-0.02-0.04-0.04-0.05-0.06 c-0.29-0.35-0.42-0.78-0.4-1.2c0.02-0.43,0.21-0.85,0.55-1.16l0,0c0.02-0.02,0.04-0.03,0.06-0.05c0.44-0.4,1.02-0.98,1.65-1.61 c0-0.01,0.03-0.03,0.04-0.04c1.71-1.72,3.8-3.81,6.11-5.23c2.22-1.36,4.63-2.08,7.07-1.25c0.36-1.68,0.86-3.25,1.5-4.69 c0.69-1.54,1.56-2.93,2.62-4.12c1.09-1.22,2.37-2.23,3.85-2.98c1.31-0.66,2.79-1.13,4.44-1.35c0.16-0.84,0.38-1.66,0.68-2.46 c0.34-0.92,0.78-1.8,1.32-2.65c0.45-0.72,0.98-1.41,1.57-2.07c0.39-0.44,0.81-0.86,1.26-1.27c-1.68-0.44-3.35-0.85-5.01-1.22 c-1.91-0.42-3.8-0.78-5.67-1.07l-0.07,0.03c-0.62,0.23-1.2,0.68-1.73,1.29c-0.62,0.71-1.18,1.64-1.67,2.66 c-0.65,1.36-1.16,2.87-1.54,4.31c-0.49,1.84-0.77,3.59-0.87,4.82c-0.04,0.47-0.27,0.89-0.6,1.17c-0.33,0.28-0.77,0.44-1.23,0.4 l-0.04,0c-0.46-0.04-0.87-0.27-1.15-0.6c-0.28-0.33-0.44-0.77-0.4-1.23l0-0.04c0.12-1.38,0.44-3.35,0.99-5.42 c0.43-1.64,1.01-3.35,1.75-4.9c0.36-0.75,0.75-1.47,1.2-2.13c0.22-0.33,0.44-0.64,0.68-0.93c-0.85-0.07-1.69-0.12-2.54-0.16 c-1.17-0.05-2.34-0.05-3.5-0.02c-4.09,0.12-8.15,0.76-12.21,2.09c-3.89,1.28-7.77,3.19-11.69,5.91c0.45,0.29,0.87,0.61,1.28,0.94 c0.61,0.51,1.17,1.06,1.68,1.65c0.71,0.83,1.3,1.75,1.76,2.72c0.45,0.95,0.76,1.95,0.92,2.98c0.07,0.47-0.06,0.92-0.32,1.28 c-0.26,0.35-0.66,0.61-1.13,0.68c-0.47,0.07-0.92-0.06-1.28-0.32c-0.35-0.26-0.61-0.66-0.68-1.13c-0.11-0.71-0.33-1.4-0.64-2.06 c-0.32-0.68-0.75-1.33-1.26-1.93c-0.52-0.61-1.13-1.17-1.82-1.66c-0.66-0.47-1.38-0.88-2.15-1.19c-0.78,0.42-1.55,0.85-2.29,1.3 c-0.82,0.49-1.62,1.01-2.39,1.54c-1.08,0.75-2.11,1.56-3.09,2.44c-0.85,0.76-1.65,1.57-2.39,2.44c1.92,1.57,2.68,3.24,2.82,4.99 c0.15,1.82-0.38,3.69-0.94,5.65c0,0.02-0.01,0.04-0.02,0.07c-1.01,3.57-2.13,7.57,2.81,11.79c0.36,0.31,0.56,0.74,0.6,1.17 c0.03,0.44-0.1,0.89-0.41,1.25c-0.31,0.36-0.74,0.56-1.17,0.6c-0.44,0.03-0.89-0.1-1.25-0.41c-3.31-2.82-4.6-5.54-4.9-8.13 c-0.3-2.57,0.38-4.97,1.02-7.23c0.42-1.48,0.82-2.89,0.75-4.14c-0.06-1.08-0.49-2.1-1.6-3.02c-1.48,1.67-2.85,3.4-4.07,5.23 c-1.3,1.95-2.41,4.02-3.29,6.24c-0.98,2.49-1.66,5.19-1.95,8.14c-0.29,2.96-0.19,6.19,0.38,9.75c0.3,1.88,0.64,3.55,1.08,5.04 c0.44,1.46,0.98,2.76,1.7,3.91c0.7,1.12,1.59,2.13,2.75,3.07C10.68,66.04,12.12,66.91,13.9,67.74L13.9,67.74z M86.82,42.45 c2.21,2.05,2.91,3.61,2.65,5.16c-0.26,1.56-1.5,2.97-3.15,4.87l0,0c-0.78,0.89-1.67,1.92-2.52,3.07c-0.28,0.38-0.69,0.61-1.13,0.68 c-0.43,0.06-0.89-0.04-1.27-0.32c-0.38-0.28-0.61-0.69-0.68-1.13c-0.06-0.43,0.04-0.89,0.32-1.27c1-1.34,1.9-2.38,2.68-3.28 l0.01-0.01c1-1.15,1.75-2.01,1.93-2.8c0.15-0.67-0.12-1.37-1.05-2.32l-0.37,0.14v0c-0.2,0.07-0.49,0.18-0.83,0.3 c-0.32,0.11-0.67,0.24-1.03,0.37c-0.38,0.14-0.8,0.31-1.23,0.49c-0.17,0.07-0.32,0.14-0.47,0.21l-0.48,0.22 c-0.36,0.17-0.73,0.34-1.1,0.5c-0.39,0.16-0.78,0.31-1.18,0.43c-0.53,0.16-1.09,0.34-1.56,0.49l-0.03,0.01 c-1.28,0.4-1.96,0.62-2.9,0.66c-0.5,0.02-1-0.02-1.63-0.13c-0.62-0.1-1.34-0.26-2.33-0.47l-0.95-0.2 c-0.03-0.01-0.05-0.01-0.08-0.02l-0.1-0.03l-3.98-1.33c-0.03-0.01-0.05-0.01-0.07-0.02c-0.44-0.15-0.77-0.46-0.97-0.85 c-0.19-0.38-0.24-0.84-0.11-1.28l0.02-0.06c0.15-0.44,0.46-0.77,0.85-0.97c0.39-0.19,0.84-0.24,1.28-0.11 c0.03,0.01,0.05,0.02,0.07,0.03l3.85,1.28l0.9,0.19c0.88,0.19,1.53,0.33,2.04,0.41c0.48,0.08,0.81,0.12,1.08,0.11 c0.43-0.02,0.97-0.19,1.98-0.51c0.25-0.07,0.49-0.16,0.74-0.23c0.3-0.09,0.61-0.19,0.91-0.28c0.61-0.18,1.21-0.46,1.81-0.74 l0.52-0.24c0.18-0.08,0.36-0.16,0.55-0.24c1.06-0.45,1.83-0.72,2.45-0.94c0.62-0.22,0.94-0.33,1.02-0.55 c0.13-0.32,0.08-1-0.03-2.36c-0.12-1.56-0.17-2.8-0.09-3.87c0.08-1.1,0.31-2.01,0.76-2.87c0.44-0.85,1.05-1.58,1.91-2.31 c0.83-0.71,1.89-1.43,3.24-2.29L89.15,28c0.42-0.27,0.74-0.46,1.01-0.63l0.05-0.03c0.77-0.47,1.21-0.74,1.42-1.12 c0.23-0.4,0.29-1.04,0.31-2.26c0.01-0.71,0.04-1.36,0.13-1.98c0.09-0.65,0.24-1.25,0.5-1.82c0.3-0.64,0.71-1.2,1.28-1.68 c0.56-0.47,1.28-0.85,2.19-1.14c0.45-0.14,0.92-0.09,1.31,0.11c0.39,0.2,0.7,0.56,0.85,1.01c0.14,0.45,0.09,0.92-0.11,1.31 c-0.2,0.39-0.56,0.7-1.01,0.85c-0.42,0.13-0.73,0.29-0.96,0.46c-0.2,0.15-0.34,0.33-0.43,0.52c-0.12,0.26-0.2,0.6-0.24,0.99 c-0.05,0.43-0.07,0.91-0.08,1.43c-0.04,2.07-0.16,3.17-0.66,4.02c-0.51,0.87-1.31,1.36-2.74,2.24l-0.51,0.31l-0.45,0.28l-0.1,0.07 c-1.14,0.73-2.02,1.31-2.67,1.84c-0.62,0.5-1.03,0.95-1.27,1.42c-0.24,0.47-0.36,1.04-0.4,1.8c-0.04,0.8,0.01,1.82,0.11,3.11 c0.06,0.82,0.11,1.49,0.14,2.1C86.84,41.71,86.84,42.11,86.82,42.45L86.82,42.45z M67.07,67.85c0.36,0.28,0.58,0.67,0.65,1.09 c0.07,0.43-0.02,0.89-0.3,1.28l-0.01,0.01c-0.28,0.38-0.68,0.61-1.11,0.68c-0.43,0.07-0.89-0.02-1.28-0.3l0,0 c-0.25-0.18-0.48-0.37-0.69-0.58c-0.22-0.21-0.42-0.44-0.6-0.68c-0.54-0.71-0.93-1.53-1.16-2.41c-0.24-0.91-0.32-1.89-0.25-2.86 c0.06-0.92,0.26-1.86,0.58-2.75c0.31-0.87,0.74-1.71,1.28-2.46l0,0c0.25-0.34,0.52-0.67,0.81-0.98c0.29-0.3,0.59-0.57,0.92-0.82 L65.99,57c0.48-0.36,0.99-0.68,1.53-0.96c0.54-0.28,1.11-0.52,1.7-0.72c0.6-0.2,1.22-0.37,1.87-0.5c0.64-0.13,1.31-0.22,2-0.28 l0.14-0.01h6c0.48,0,0.91,0.19,1.22,0.5l0.03,0.03c0.29,0.31,0.47,0.73,0.47,1.18c0,0.48-0.19,0.91-0.5,1.22 c-0.31,0.31-0.74,0.5-1.22,0.5h-5.95c-0.53,0.05-1.04,0.12-1.54,0.22c-0.5,0.1-0.98,0.22-1.42,0.37c-0.42,0.14-0.83,0.31-1.21,0.51 c-0.37,0.19-0.72,0.4-1.04,0.64L68,59.79c-0.19,0.15-0.37,0.31-0.54,0.48c-0.18,0.18-0.34,0.38-0.49,0.59 c-0.35,0.48-0.63,1.03-0.84,1.61c-0.21,0.59-0.34,1.21-0.38,1.82l0,0.01c-0.04,0.59,0,1.16,0.13,1.67 c0.12,0.48,0.31,0.91,0.59,1.27l0.02,0.03c0.08,0.1,0.16,0.19,0.25,0.28l0,0c0.09,0.09,0.19,0.17,0.3,0.25L67.07,67.85L67.07,67.85 z M40.58,65.49c-0.45,0.11-0.9,0.03-1.28-0.2l0,0c-0.38-0.23-0.67-0.6-0.79-1.06c-0.12-0.46-0.03-0.92,0.19-1.3l0,0 c0.23-0.38,0.6-0.67,1.06-0.79c3.91-0.99,6.27-1.06,8.13-0.4c1.88,0.67,3.15,2.04,4.93,3.94l0.2,0.22c0.73,0.78,1.33,1.41,1.87,1.9 c0.51,0.47,0.97,0.82,1.42,1.05c0.43,0.22,0.9,0.36,1.49,0.44c0.62,0.09,1.36,0.11,2.28,0.1h0c0.47-0.01,0.9,0.18,1.22,0.48 c0.31,0.3,0.51,0.73,0.52,1.21v0.01h0l0,0.05c-0.01,0.45-0.19,0.87-0.48,1.17c-0.3,0.31-0.73,0.51-1.2,0.52h-0.01v0l-0.04,0 c-1.18,0.02-2.14-0.02-2.98-0.16c-0.88-0.14-1.64-0.38-2.37-0.76c-0.71-0.36-1.35-0.83-2.03-1.44c-0.66-0.59-1.36-1.32-2.2-2.22 l-0.2-0.22c-1.33-1.43-2.29-2.46-3.6-2.92c-1.33-0.46-3.1-0.39-6.09,0.37L40.58,65.49L40.58,65.49z M77.6,23.75 c-0.11-0.31-0.24-0.6-0.39-0.88c-0.2-0.36-0.44-0.69-0.69-0.97c-0.28-0.32-0.58-0.59-0.87-0.81c-0.31-0.23-0.61-0.4-0.88-0.51l0,0 c-0.44-0.17-0.77-0.51-0.95-0.91c-0.18-0.4-0.2-0.87-0.03-1.31l0,0c0.17-0.44,0.51-0.77,0.91-0.95c0.4-0.18,0.87-0.2,1.31-0.03 c0.52,0.2,1.08,0.51,1.63,0.91c0.5,0.37,1,0.82,1.46,1.35c0.28,0.32,0.55,0.67,0.79,1.04c0.14,0.21,0.27,0.43,0.39,0.65 c0.23-0.11,0.47-0.22,0.74-0.34l0.03-0.01c0.43-0.19,0.91-0.39,1.45-0.61c0.54-0.22,1.14-0.47,1.83-0.77 c0.68-0.3,1.44-0.64,2.3-1.06c0.43-0.21,0.9-0.22,1.31-0.07c0.42,0.14,0.78,0.45,0.98,0.88c0.21,0.43,0.22,0.9,0.07,1.31 c-0.14,0.42-0.45,0.78-0.88,0.98c-0.87,0.42-1.67,0.79-2.39,1.1c-0.69,0.3-1.32,0.56-1.89,0.8c-0.02,0.01-0.05,0.02-0.08,0.03 c-2.72,1.13-3.31,1.39-3.6,4.54l-0.01,0.11c-0.18,1.89-0.31,3.36-0.83,4.76c-0.52,1.42-1.41,2.71-3.08,4.2 c-0.35,0.32-0.8,0.46-1.24,0.43c-0.44-0.03-0.87-0.22-1.19-0.57c-0.32-0.35-0.46-0.8-0.43-1.24c0.03-0.44,0.22-0.87,0.57-1.19 c1.18-1.05,1.8-1.97,2.16-2.98c0.37-1.04,0.48-2.21,0.62-3.71l0.01-0.11c0.09-0.99,0.2-1.8,0.35-2.47 C77.22,24.71,77.39,24.19,77.6,23.75L77.6,23.75z M4.86,45.88c0-0.02,0-0.05,0-0.07c0.03-0.45,0.23-0.86,0.54-1.15 c0.32-0.3,0.75-0.48,1.21-0.46v0c0.02,0,0.05,0,0.07,0c0.45,0.03,0.86,0.23,1.15,0.54c0.3,0.32,0.48,0.76,0.46,1.23 c-0.06,1.82,0.52,2.94,1.45,3.73c0.98,0.83,2.38,1.34,3.86,1.88c2.21,0.81,4.55,1.66,6.46,3.42c1.92,1.77,3.37,4.41,3.71,8.74 c0.04,0.47-0.12,0.92-0.41,1.25c-0.29,0.34-0.7,0.56-1.17,0.6c-0.47,0.04-0.92-0.12-1.25-0.41c-0.34-0.29-0.56-0.7-0.6-1.17 c-0.26-3.26-1.35-5.23-2.8-6.54l-0.03-0.03c-1.46-1.31-3.33-1.99-5.09-2.63c-2.01-0.73-3.91-1.43-5.32-2.71 C5.66,50.79,4.77,48.92,4.86,45.88L4.86,45.88L4.86,45.88z M85.28,72.59c0.68,0.3,1.37,0.54,2.09,0.73 c1.15,0.3,2.34,0.48,3.57,0.53c1.69,0.07,3.46-0.08,5.3-0.42c1.85-0.34,3.77-0.87,5.75-1.56c0.45-0.16,0.92-0.12,1.31,0.08 c0.4,0.19,0.72,0.53,0.87,0.98c0.16,0.45,0.12,0.92-0.08,1.31c-0.19,0.4-0.53,0.72-0.98,0.87c-2.16,0.76-4.28,1.34-6.33,1.71 c-2.06,0.37-4.06,0.54-5.99,0.46c-1.91-0.08-3.75-0.4-5.49-0.99c-1.68-0.57-3.28-1.38-4.77-2.47l-5.46,1.41 c1.13,1.38,2.32,2.56,3.59,3.54c1.44,1.11,2.98,1.94,4.63,2.49c1.8,0.59,3.75,0.84,5.85,0.71c2.12-0.13,4.4-0.65,6.85-1.57 c0.44-0.17,0.91-0.14,1.31,0.04c0.4,0.18,0.73,0.52,0.9,0.96c0.17,0.44,0.14,0.91-0.04,1.31c-0.18,0.4-0.52,0.73-0.96,0.9 c-2.82,1.07-5.47,1.66-7.96,1.8c-2.5,0.14-4.84-0.16-7.02-0.88c-2.09-0.69-4.03-1.76-5.83-3.17c-1.69-1.33-3.26-2.97-4.71-4.89 c-0.49,0.2-0.99,0.41-1.51,0.62c-0.41,0.17-0.83,0.34-1.26,0.51c1.12,1.61,2.29,3.04,3.5,4.29c1.34,1.39,2.72,2.55,4.14,3.48 c1.29,0.84,2.59,1.49,3.91,1.92c1.28,0.42,2.56,0.65,3.84,0.67l0.11-0.02l0.04,0c0.05-0.01,0.09-0.01,0.13-0.01 c4.35-0.23,7.99-0.77,10.98-1.69c2.96-0.91,5.3-2.19,7.08-3.92c1.67-1.63,2.88-3.68,3.7-6.24c0.78-2.44,1.19-5.33,1.3-8.73 l-7.54,1.47L85.28,72.59L85.28,72.59z M86.57,91.21l1.75,15.59c0.05,0.46-0.1,0.91-0.37,1.25c-0.27,0.34-0.68,0.58-1.15,0.63 l-0.02,0c-0.46,0.05-0.91-0.1-1.25-0.37c-0.34-0.27-0.58-0.68-0.63-1.15l-1.78-15.84c-1.37-0.12-2.73-0.42-4.07-0.89 c-1.49-0.52-2.96-1.26-4.39-2.2c-1.67-1.1-3.31-2.47-4.87-4.11c-1.47-1.54-2.87-3.31-4.19-5.29c-0.77,0.28-1.54,0.54-2.29,0.78 c-0.89,0.29-1.75,0.54-2.58,0.77l-0.24,0.06c1.57,2.8,3.3,4.92,5.06,6.65c1.88,1.85,3.8,3.25,5.58,4.54 c2.64,1.93,5.01,3.66,6.7,6.18c1.7,2.54,2.68,5.83,2.51,10.85c-0.02,0.47-0.22,0.9-0.54,1.2c-0.32,0.3-0.76,0.48-1.23,0.46 c-0.47-0.01-0.9-0.22-1.2-0.54c-0.3-0.32-0.48-0.76-0.46-1.23c0.14-4.14-0.67-6.85-2.07-8.92c-1.41-2.09-3.45-3.58-5.73-5.23 c-1.97-1.44-4.1-2.99-6.2-5.09c-2.06-2.06-4.09-4.63-5.92-8.12c-1.26,0.2-2.47,0.31-3.6,0.29c-1.24-0.01-2.38-0.17-3.43-0.48 c-2.2-0.12-4.31-0.34-6.31-0.71c-2.03-0.37-3.94-0.88-5.71-1.55c-1.72-0.66-3.32-1.47-4.76-2.48c-1.37-0.95-2.61-2.06-3.69-3.36 c-1.42,0.18-2.81,0.3-4.18,0.34c-1.46,0.04-2.89,0-4.28-0.13c-1.52-0.14-3-0.4-4.43-0.77c-1.43-0.37-2.82-0.87-4.16-1.49 c-2.1-0.98-3.8-2.02-5.2-3.16c-1.41-1.16-2.52-2.42-3.41-3.84c-0.87-1.39-1.52-2.91-2.03-4.61c-0.5-1.67-0.88-3.53-1.22-5.61 c-0.63-3.88-0.73-7.42-0.41-10.67c0.32-3.27,1.08-6.25,2.17-9.01c1.08-2.75,2.48-5.27,4.12-7.62c1.63-2.35,3.48-4.53,5.46-6.62 c0.98-1.23,2.05-2.35,3.18-3.39c1.13-1.03,2.34-1.98,3.6-2.87c1.24-0.86,2.53-1.66,3.86-2.41c1.32-0.75,2.67-1.44,4.03-2.09 c4.37-3.09,8.72-5.25,13.07-6.67c4.36-1.43,8.73-2.11,13.13-2.24c4.34-0.13,8.7,0.29,13.12,1.07c4.39,0.77,8.84,1.9,13.39,3.21 c4.81-0.09,8.87,0.43,12.33,1.46c3.5,1.03,6.39,2.57,8.82,4.49c2.41,1.9,4.34,4.15,5.97,6.64c1.6,2.45,2.89,5.11,4.03,7.89 c1.28,1.17,2.51,2.47,3.68,3.87c1.18,1.42,2.28,2.93,3.28,4.51c1.49,2.36,2.75,4.88,3.69,7.45c0.89,2.44,1.48,4.92,1.69,7.37 c0.24,2.69,0.02,5.34-0.75,7.85c-0.72,2.33-1.92,4.52-3.69,6.5c-0.6,0.66-1.25,1.3-1.96,1.89c-0.69,0.58-1.44,1.13-2.26,1.65 c-0.1,0.07-0.21,0.14-0.33,0.19c-0.11,0.05-0.23,0.09-0.36,0.11l-2.35,0.46c-0.07,4.06-0.55,7.53-1.49,10.48 c-0.99,3.08-2.48,5.6-4.57,7.63c-2.02,1.97-4.57,3.44-7.71,4.5C94.3,90.26,90.74,90.89,86.57,91.21L86.57,91.21z\" /></g></svg>",
                            Name = "Nervous",
                            Type = 5
                        },
                        new
                        {
                            Id = 7,
                            HTML = "<svg fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-emoji-laughing\" viewBox=\"0 0 16 16\">\r\n                            <path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16\" />\r\n                            <path d=\"M12.331 9.5a1 1 0 0 1 0 1A5 5 0 0 1 8 13a5 5 0 0 1-4.33-2.5A1 1 0 0 1 4.535 9h6.93a1 1 0 0 1 .866.5M7 6.5c0 .828-.448 0-1 0s-1 .828-1 0S5.448 5 6 5s1 .672 1 1.5m4 0c0 .828-.448 0-1 0s-1 .828-1 0S9.448 5 10 5s1 .672 1 1.5\" />\r\n                        </svg>",
                            Name = "Feeling Good!",
                            Type = 5
                        });
                });

            modelBuilder.Entity("FoodTracker.Models.IconGroupType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IconGroupTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Activity"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            Name = "FODMAP"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Food"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Reaction"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Site"
                        });
                });

            modelBuilder.Entity("FoodTracker.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FoodTracker.Models.Meal.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("MealTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ColorId");

                    b.HasIndex("MealTypeId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("FoodTracker.Models.Meal.MealItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<double>("Volume")
                        .HasColumnType("float");

                    b.Property<int>("VolumeUnitsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("MealId");

                    b.HasIndex("VolumeUnitsId");

                    b.ToTable("MealItems");
                });

            modelBuilder.Entity("FoodTracker.Models.Meal.MealType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MealTypes");
                });

            modelBuilder.Entity("FoodTracker.Models.Reaction.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("FoodId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("IdentifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MealId")
                        .HasColumnType("int");

                    b.Property<int?>("SeverityId")
                        .HasColumnType("int");

                    b.Property<int>("SourceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubsidedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FoodId");

                    b.HasIndex("MealId");

                    b.HasIndex("SeverityId");

                    b.HasIndex("SourceTypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("FoodTracker.Models.Reaction.ReactionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IconId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IconId");

                    b.ToTable("ReactionCategories");
                });

            modelBuilder.Entity("FoodTracker.Models.Reaction.ReactionSeverity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ReactionSeverities");
                });

            modelBuilder.Entity("FoodTracker.Models.Reaction.ReactionSourceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ReactionSourceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Food"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Meal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Activity"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Day"
                        });
                });

            modelBuilder.Entity("FoodTracker.Models.Reaction.ReactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ReactionTypes");
                });

            modelBuilder.Entity("FoodTracker.Models.Reaction.UserSafeFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("UserSafeFoods");
                });

            modelBuilder.Entity("FoodTracker.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "AL",
                            Name = "Alabama"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "AK",
                            Name = "Alaska"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "AZ",
                            Name = "Arizona"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "AR",
                            Name = "Arkansas"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "AS",
                            Name = "American Samoa"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "CA",
                            Name = "California"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "CO",
                            Name = "Colorado"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "CT",
                            Name = "Connecticut"
                        },
                        new
                        {
                            Id = 9,
                            Abbreviation = "DE",
                            Name = "Delaware"
                        },
                        new
                        {
                            Id = 10,
                            Abbreviation = "DC",
                            Name = "District of Columbia"
                        },
                        new
                        {
                            Id = 11,
                            Abbreviation = "FL",
                            Name = "Florida"
                        },
                        new
                        {
                            Id = 12,
                            Abbreviation = "GA",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 13,
                            Abbreviation = "GU",
                            Name = "Guam"
                        },
                        new
                        {
                            Id = 14,
                            Abbreviation = "HI",
                            Name = "Hawaii"
                        },
                        new
                        {
                            Id = 15,
                            Abbreviation = "ID",
                            Name = "Idaho"
                        },
                        new
                        {
                            Id = 16,
                            Abbreviation = "IL",
                            Name = "Illinois"
                        },
                        new
                        {
                            Id = 17,
                            Abbreviation = "IN",
                            Name = "Indiana"
                        },
                        new
                        {
                            Id = 18,
                            Abbreviation = "IA",
                            Name = "Iowa"
                        },
                        new
                        {
                            Id = 19,
                            Abbreviation = "KS",
                            Name = "Kansas"
                        },
                        new
                        {
                            Id = 20,
                            Abbreviation = "KY",
                            Name = "Kentucky"
                        },
                        new
                        {
                            Id = 21,
                            Abbreviation = "LA",
                            Name = "Louisiana"
                        },
                        new
                        {
                            Id = 22,
                            Abbreviation = "ME",
                            Name = "Maine"
                        },
                        new
                        {
                            Id = 23,
                            Abbreviation = "MD",
                            Name = "Maryland"
                        },
                        new
                        {
                            Id = 24,
                            Abbreviation = "MA",
                            Name = "Massachusetts"
                        },
                        new
                        {
                            Id = 25,
                            Abbreviation = "MI",
                            Name = "Michigan"
                        },
                        new
                        {
                            Id = 26,
                            Abbreviation = "MN",
                            Name = "Minnesota"
                        },
                        new
                        {
                            Id = 27,
                            Abbreviation = "MS",
                            Name = "Mississippi"
                        },
                        new
                        {
                            Id = 28,
                            Abbreviation = "MO",
                            Name = "Missouri"
                        },
                        new
                        {
                            Id = 29,
                            Abbreviation = "MT",
                            Name = "Montana"
                        },
                        new
                        {
                            Id = 30,
                            Abbreviation = "NE",
                            Name = "Nebraska"
                        },
                        new
                        {
                            Id = 31,
                            Abbreviation = "NV",
                            Name = "Nevada"
                        },
                        new
                        {
                            Id = 32,
                            Abbreviation = "NH",
                            Name = "New Hampshire"
                        },
                        new
                        {
                            Id = 33,
                            Abbreviation = "NJ",
                            Name = "New Jersey"
                        },
                        new
                        {
                            Id = 34,
                            Abbreviation = "NM",
                            Name = "New Mexico"
                        },
                        new
                        {
                            Id = 35,
                            Abbreviation = "NY",
                            Name = "New York"
                        },
                        new
                        {
                            Id = 36,
                            Abbreviation = "NC",
                            Name = "North Carolina"
                        },
                        new
                        {
                            Id = 37,
                            Abbreviation = "ND",
                            Name = "North Dakota"
                        },
                        new
                        {
                            Id = 38,
                            Abbreviation = "MP",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            Id = 39,
                            Abbreviation = "OH",
                            Name = "Ohio"
                        },
                        new
                        {
                            Id = 40,
                            Abbreviation = "OK",
                            Name = "Oklahoma"
                        },
                        new
                        {
                            Id = 41,
                            Abbreviation = "OR",
                            Name = "Oregon"
                        },
                        new
                        {
                            Id = 42,
                            Abbreviation = "PA",
                            Name = "Pennsylvania"
                        },
                        new
                        {
                            Id = 43,
                            Abbreviation = "PR",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = 44,
                            Abbreviation = "RI",
                            Name = "Rhode Island"
                        },
                        new
                        {
                            Id = 45,
                            Abbreviation = "SC",
                            Name = "South Carolina"
                        },
                        new
                        {
                            Id = 46,
                            Abbreviation = "SD",
                            Name = "South Dakota"
                        },
                        new
                        {
                            Id = 47,
                            Abbreviation = "TN",
                            Name = "Tennessee"
                        },
                        new
                        {
                            Id = 48,
                            Abbreviation = "TX",
                            Name = "Texas"
                        },
                        new
                        {
                            Id = 49,
                            Abbreviation = "TT",
                            Name = "Trust Territories"
                        },
                        new
                        {
                            Id = 50,
                            Abbreviation = "UT",
                            Name = "Utah"
                        },
                        new
                        {
                            Id = 51,
                            Abbreviation = "VT",
                            Name = "Vermont"
                        },
                        new
                        {
                            Id = 52,
                            Abbreviation = "VA",
                            Name = "Virginia"
                        },
                        new
                        {
                            Id = 53,
                            Abbreviation = "VI",
                            Name = "Virgin Islands"
                        },
                        new
                        {
                            Id = 54,
                            Abbreviation = "WA",
                            Name = "Washington"
                        },
                        new
                        {
                            Id = 55,
                            Abbreviation = "WV",
                            Name = "West Virginia"
                        },
                        new
                        {
                            Id = 56,
                            Abbreviation = "WI",
                            Name = "Wisconsin"
                        },
                        new
                        {
                            Id = 57,
                            Abbreviation = "WY",
                            Name = "Wyoming"
                        });
                });

            modelBuilder.Entity("FoodTracker.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePlural")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortNamePlural")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("FoodTracker.Models.UnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnitTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodTracker.Models.Identity.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddressOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddressTwo")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("StateId");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("FoodTracker.Models.Activity.Activity", b =>
                {
                    b.HasOne("FoodTracker.Models.Unit", "DurationUnits")
                        .WithMany()
                        .HasForeignKey("DurationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTracker.Models.Activity.ActivityIntensity", "Intensity")
                        .WithMany()
                        .HasForeignKey("IntensityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTracker.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTracker.Models.Activity.ActivityType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DurationUnits");

                    b.Navigation("Intensity");

                    b.Navigation("Location");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("FoodTracker.Models.Event.Event", b =>
                {
                    b.HasOne("FoodTracker.Models.Event.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("FoodTracker.Models.FODMAP.Fodmap", b =>
                {
                    b.HasOne("FoodTracker.Models.FODMAP.FodmapCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTracker.Models.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTracker.Models.Unit", "MaxUseUnits")
                        .WithMany()
                        .HasForeignKey("MaxUseUnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("MaxUseUnits");
                });

            modelBuilder.Entity("FoodTracker.Models.FODMAP.FodmapAlias", b =>
                {
                    b.HasOne("FoodTracker.Models.FODMAP.Fodmap", null)
                        .WithMany("Aliases")
                        .HasForeignKey("FodmapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodTracker.Models.Food.Food", b =>
                {
                    b.HasOne("FoodTracker.Models.FODMAP.Fodmap", "Fodmap")
                        .WithMany()
                        .HasForeignKey("FodmapId");

                    b.Navigation("Fodmap");
                });

            modelBuilder.Entity("FoodTracker.Models.Food.FoodAlias", b =>
                {
                    b.HasOne("FoodTracker.Models.Food.Food", null)
                        .WithMany("Aliases")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodTracker.Models.Food.IngredientMap", b =>
                {
                    b.HasOne("FoodTracker.Models.Food.Food", "IngredientFood")
                        .WithMany("IngredientFoods")
                        .HasForeignKey("IngredientFoodId");

                    b.HasOne("FoodTracker.Models.Food.Food", "ParentFood")
                        .WithMany("ParentFoods")
                        .HasForeignKey("ParentFoodId");

                    b.Navigation("IngredientFood");

                    b.Navigation("ParentFood");
                });

            modelBuilder.Entity("FoodTracker.Models.Icon", b =>
                {
                    b.HasOne("FoodTracker.Models.IconGroupType", "IconGroupType")
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IconGroupType");
                });

            modelBuilder.Entity("FoodTracker.Models.Meal.Meal", b =>
                {
                    b.HasOne("FoodTracker.Models.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTracker.Models.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("FoodTracker.Models.Meal.MealType", "MealType")
                        .WithMany()
                        .HasForeignKey("MealTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Color");

                    b.Navigation("MealType");
                });

            modelBuilder.Entity("FoodTracker.Models.Meal.MealItem", b =>
                {
                    b.HasOne("FoodTracker.Models.Food.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTracker.Models.Meal.Meal", null)
                        .WithMany("MealItems")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTracker.Models.Unit", "VolumeUnits")
                        .WithMany()
                        .HasForeignKey("VolumeUnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("VolumeUnits");
                });

            modelBuilder.Entity("FoodTracker.Models.Reaction.Reaction", b =>
                {
                    b.HasOne("FoodTracker.Models.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTracker.Models.Food.Food", null)
                        .WithMany("Reactions")
                        .HasForeignKey("FoodId");

                    b.HasOne("FoodTracker.Models.Meal.Meal", null)
                        .WithMany("Reactions")
                        .HasForeignKey("MealId");

                    b.HasOne("FoodTracker.Models.Reaction.ReactionSeverity", "Severity")
                        .WithMany()
                        .HasForeignKey("SeverityId");

                    b.HasOne("FoodTracker.Models.Reaction.ReactionSourceType", "SourceType")
                        .WithMany()
                        .HasForeignKey("SourceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodTracker.Models.Reaction.ReactionType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("AppUser");

                    b.Navigation("Severity");

                    b.Navigation("SourceType");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("FoodTracker.Models.Reaction.ReactionCategory", b =>
                {
                    b.HasOne("FoodTracker.Models.Icon", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("FoodTracker.Models.Reaction.ReactionType", b =>
                {
                    b.HasOne("FoodTracker.Models.Reaction.ReactionCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FoodTracker.Models.Reaction.UserSafeFood", b =>
                {
                    b.HasOne("FoodTracker.Models.Food.Food", null)
                        .WithMany("UserSafeFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodTracker.Models.Identity.AppUser", b =>
                {
                    b.HasOne("FoodTracker.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("FoodTracker.Models.FODMAP.Fodmap", b =>
                {
                    b.Navigation("Aliases");
                });

            modelBuilder.Entity("FoodTracker.Models.Food.Food", b =>
                {
                    b.Navigation("Aliases");

                    b.Navigation("IngredientFoods");

                    b.Navigation("ParentFoods");

                    b.Navigation("Reactions");

                    b.Navigation("UserSafeFoods");
                });

            modelBuilder.Entity("FoodTracker.Models.Meal.Meal", b =>
                {
                    b.Navigation("MealItems");

                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
